# 파이썬의 객체(`object`) 

『Python Distilled(David M. Beazley)』의 Chapter 4를 읽자. 

## Mutable vs Immutable

Python 언어의 객체는 소유한 값을 바꿀 수 있는지 여부에 따라 mutable과 immutable로 나뉜다.

- `Mutable`: 자신이 가진 값을 바꿀 수 있는 객체 
- `Immutable`: 자신이 가진 값을 바꿀 수 없는 객체 

이것은 변수의 이름에 대한 것이 아니고, 메모리에 존재하는 것을 기준으로 한다. 어떤 객체가 가진 값을 대상으로 메모리의 위치는 바꾸지 않으면서 값을 바꿀 수 있을 때 mutable이라고 한다. Immutable 객체는 메모리에 바꾸지 않고서는 값을 바꾸지 못한다. 

### id() 함수로 차이 확인 

파이썬에 내장된 `id()` 함수는 메모리 위치를 표현하는 정수를 반환하는 함수이다. 

Mutable 객체의 대표적인 예는 파이썬 `list`이다. 다음 코드를 보면 리스트 한 요소의 값을 바꾸어도 `id()` 값은 바뀌지 않음을 볼 수 있다.

```{python}
my_list = [1, 3, 5, 7, 9]
print(id(my_list))
# 0번 인덱스의 값을 바꿈 
my_list[0] = 100
print(id(my_list))
```

Immutable 객체의 대표적인 예는 문자열(`str`)이다. Immutable 객체의 값을 바꾸려 하면 오류가 발생한다.

```{python}
#| error: true
my_str = 'hnee'
my_str[0] = 'k'
```

Immutable 객체의 값을 바꾸려면, 정확히 말하면 주어진 이름으로 바뀐 값을 가지게 하려면, 새로운 객체를 만들어야 한다(새로운 객체여서 기존 객체의 `id()`와 다르다). 같은 이름 `my_str`이 새로운 값 `knee`를 가지게 되었지만, 바뀐 `my_str`은 원래의 `my_str`이 아니다. 이를 `id()` 함수로 확인할 수 있다. 

```{python}
my_str = 'hnee'
print(id(my_str))
my_str = 'knee'
print(id(my_str))
```

### **In-place**의 뜻 

파이썬 관련 책이나 프로그래밍 언어를 다룰 때 "methods that change an object **in place**"과 같이 "in place"라는 말이 자주 사용된다. 이 말의 의미는 mutable 객체에 대한 것으로 해당 객체의 메모리에 있는 그대로 두고서 어떤 변화를 준다는 의미이다. 자주 사용되는 용어로 잘 알아둘 필요가 있다. 


### Augmented Assignment(복합 할당)

어떤 연산과 그 결과를 할당을 한꺼번에 표현하는 구문으로 `+=`, `-=`, `*=`, `/=` 등과 같은 형태로 사용된다. 

이런 복합 할당 연산자들은 연산의 대상이 mutable인지, immutable인지에 따라서 다른 방식으로 작동한다. 

Mutable 객체가 피연산자로 사용되는 경우를 보자. 리스트가 피연산자로 사용된다. 리스트 concatenation 연산자인 `+`와 연관된 `+=` 연산자를 사용하는데, 이 경우에는 in-place 방식으로 값이 바뀐다. 아래 코드에서 `id()`가 바뀌지 않음을 확인할 수 있다.

```{python}
a = [1,2,3]
print(id(a))
b = [4,5,6]
a += b
print(a) 
print(id(a))
```

이제 immutable 객체인 튜플(tuple)인 경우를 보자. 이 경우에는 `+=` 연산자가 `in-place`로 작동하지 않고 새로운 객체가 만들어지고, 그 새로운 객체에 기존의 이름을 붙이는 방식으로 작동한다.

```{python}
a = (1,2,3)
print(id(a))
b = (4,5,6)
a += b
print(a) 
print(id(a))
```

이런 차이가 발생하는 이유는 `+=`와 같은 복합 할당이 이뤄질 때, mutable 객체인 경우에는 이 객체가 가지고 있는 special methods인 `__iadd__()` 메서드를 내부에서 호출하고, immutable 객체인 경우에는 `a += b`가 `__add__()` 메서드를 호출하게 결국 `a = a + b`로 바뀐 다음 실행되기 때문이다. `__iadd__()`에서 `i`는 `in-place addition`를 의미한다.

### *같다*의 정확한 사용 

파이썬에는 "같음"을 확인할 수 있는 연산자가 2개 있다. 

- `==`, `!=`: 변수의 값이 같은지 확인한다.
- `is`, `is not`: 변수의 값은 물론이고 `id()`까지 같은지를 확인한다. 

다음은 두 개의 리스트를 비교한 것이다. `==`를 통해서 값이 같은지, `is`를 통해서 `id()` 값이 같은지를 확인할 수 있다.

```{python}
a = [1, 2, 3]
b = [1, 2, 3]
a == b, a is b
```

필요에 따라 적절히 사용해야 하는데, 대부분의 경우는 값을 비교하는 `==`을 사용할 것이다. `is`가 사용되는 대표적인 경우는 `None`인지 확인하는 경우이다.


```{.python}
if x is None:
    ...
```

