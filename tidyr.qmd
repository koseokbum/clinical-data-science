# [tidyr]{.style-text font-weight="bold" color="#D95F02"} 패키지로 데이터 정리 

[@sec-tidy-data]장에서 Tidy Data의 개념에 대해서 설명했다. 여기서는 실제로 사용되는 함수에 관해 좀 더 자세히 설명한다.


```{r}
#| message: false
library(tidyr)
library(dplyr)
```

## 피벗팅(Pivoting)

### 피벗팅의 기본 

우선 [`tidyr` 패키지 cheatsheet](https://rstudio.github.io/cheatsheets/html/tidyr.html?_gl=1*1xmwhrn*_ga*MTA1MDkxNTUzNC4xNzQyNzM0NTcx*_ga_2C0WZ1JHG0*MTc0NjA1NjYzOC4zNy4wLjE3NDYwNTY2MzguMC4wLjA.)에 있는 예시를 보면서 기초를 익히자.

다음과 같은 Untidy data가 있다.

```{r}
table4a
```

위 데이터셋은 각 연도별 케이스 수를 나타내는 데이터이다. 값이 되어야할 연도가 열의 이름으로 들어가 있어 이 데이터는 untidy data이다. 

이 데이터를 tidy data로 변환하기 위해서는 연도를 값으로 만들어야 하므로, 이 열들 `1999`, `2000`을 묶어서 녹인 다음, `year`라는 열과 `cases`라는 열로 재배열한다.

::: {.callout-important}
- `pivot_longer()` 함수
  - `pivot_longer(df, cols, names_to = "새이름", values_to = "새이름")`
  - 여러 열 --> (하나로 녹임) --> 펼쳐서 2개의 열로 재배열 
  - 이 2개의 열에 이름을 부여한다.
    - 이름 열은 `names_to` 인자에, 값 열을  `values_to` 인자에 지정한다.
:::

```{r}
pivot_longer(table4a,
    cols = 2:3, names_to = "year",
    values_to = "cases"
)
```

다음 `table2`는 각 나라의 인구와 케이스 수를 정리하는 데이터셋이다. 

```{r}
table2
```

이 데이터셋은 변수로 사용되어야 것들이 값으로 들어가 있다. 이것을 정리하려면 `pivot_wider()` 함수를 사용한다. 

::: {.callout-important}
- `pivot_wider()` 함수
  - `pivot_wider(df, names_from = "이름열", values_from = "값열")`
  - 2개의 열 --> (하나로 녹임) --> 펼쳐서 여러 열로 재배열 
  - 이 여러 열에 이름을 부여한다.
    - 이름으로 사용되는 값이 있는 열를 `names_from` 인자에 지정
    - 값으로 사용되는 값이 있는 열을 `values_from` 인자에 지정
:::


```{r}
pivot_wider(table2,
    names_from = type,
    values_from = count
)
```

### 복잡한 경우의 피벗팅: Longer 예시

이 절의 자료는 `tidyr` 패키지의 `Pivoting` 비니에트를 참고했다. 이 자료에는 여러 경우의 Untidy data들과 이것을 Tidy data로 변환하는 방법들이 설명되어 있다. 번역, 요약, 주석을 추가했다. 

#### 문자열 데이터가 열 이름으로 들어간 경우 

다음 `reglig_incom`를 보자.

```{r}
relig_income |>
    head()
```

이 데이터셋은 각 종교별 소득 분포를 나타내는 데이터이다. 이 데이터셋은 열 이름에 수입 범위가 들어가 있어서 untidy data이다. 이것을 tidy data로 변환하자.

```{r}
relig_income |>
    pivot_longer(
        cols = !religion, # 종교 이름이 들어가지 않는 열들을 모두 선택
        names_to = "income", # 수입 범위가 들어가는 열의 이름을 "income"으로 지정
        values_to = "count" # 수입 범위에 해당하는 값이 들어가는 열의 이름을 "count"로 지정
    )
```

#### 숫자형 데이터가 열 이름으로 들어간 경우 

다음 `billboard` 데이터셋을 보자.

```{r}
billboard |>
    head()
```

이 데이터셋은 앨범에 들어 있는 곡의 빌보트 차트 순위를 나타내는 데이터이다. 이 데이터셋은 열 이름에 주간 순위가 들어가 있어서 untidy data이다. 이것을 tidy data로 변환하자.

```{r}
billboard |>
    pivot_longer(
        cols = !c(artist, track, date.entered), # 아티스트, 곡, 진입일이 들어가지 않는 열들을 모두 선택
        names_to = "week", # 주간 순위가 들어가는 열의 이름을 "week"으로 지정
        values_to = "rank" # 주간 순위에 해당하는 값이 들어가는 열의 이름을 "rank"로 지정
    )
```

이 데이터 변환 과정에서 어떤 곡이 어느 주에 빌보드 차트에서 빠진 경우에는 `NA`로 표시된다. 이렇게 의미있는 `NA` 값이 있는 경우에는 사용자가 제거할 수 있게 하는 옵션이 있다. `values_drop_na` 인자를 `TRUE`로 지정하면 된다. 


```{r}
billboard |>
    pivot_longer(
        cols = !c(artist, track, date.entered), # 아티스트, 곡, 진입일이 들어가지 않는 열들을 모두 선택
        names_to = "week", # 주간 순위가 들어가는 열의 이름을 "week"으로 지정
        values_to = "rank", # 주간 순위에 해당하는 값이 들어가는 열의 이름을 "rank"로 지정
        values_drop_na = TRUE # 값이 없는 경우에는 제거
    )
```

위 결과를 보면 `week` 열에 `wk1` 등과 같이 문자열로 되어 있는데, 이것은 숫자형 데이터가 되어야 맞을 것이다. 그래야 어떤 곡이 몇 주 동안 빌보드에 남아있는지 등을 계산할 수 있다. 

이런 경우에 `wk1`에서 `wk`를 제거할 수 있는 옵션이 있다. `names_prefix` 인자가 그것이다.

```{r}
billboard |>
    pivot_longer(
        cols = !c(artist, track, date.entered), # 아티스트, 곡, 진입일이 들어가지 않는 열들을 모두 선택
        names_to = "week", # 주간 순위가 들어가는 열의 이름을 "week"으로 지정
        names_prefix = "wk", # "wk" 문자열을 제거
        values_to = "rank", # 주간 순위에 해당하는 값이 들어가는 열의 이름을 "rank"로 지정
        values_drop_na = TRUE # 값이 없는 경우에는 제거
    )
```

위 결과를 잘 보면 `week` 열이 아직도 문자열로 되어 있다. 이것을 숫자형 데이터로 변환할 수 있다. 

```{r}
billboard |>
    pivot_longer(
        cols = !c(artist, track, date.entered), # 아티스트, 곡, 진입일이 들어가지 않는 열들을 모두 선택
        names_to = "week", # 주간 순위가 들어가는 열의 이름을 "week"으로 지정
        names_prefix = "wk", # "wk" 문자열을 제거
        values_to = "rank", # 주간 순위에 해당하는 값이 들어가는 열의 이름을 "rank"로 지정
        values_drop_na = TRUE # 값이 없는 경우에는 제거
    ) |>
    mutate(week = as.numeric(week))
```

그런데 `pivot_longer()` 함수에서 이 작업을 해주는 옵션이 있다. `pivot_longer()` 함수는 `names_to`에 의해서 생성되는 열들을 디폴트로 **문자열** 타입으로 만들고, `values_to`에 의해서 생성되는 열들의 타입은 입력되는 열에서 가장 흔한 타입이 되게 한다. 이 과정을 `names_transform`, `values_transform` 인자를 사용하여 변경할 수 있다. 

```{r}
billboard |>
    pivot_longer(
        cols = !c(artist, track, date.entered), # 아티스트, 곡, 진입일이 들어가지 않는 열들을 모두 선택
        names_to = "week", # 주간 순위가 들어가는 열의 이름을 "week"으로 지정
        values_to = "rank", # 주간 순위에 해당하는 값이 들어가는 열의 이름을 "rank"로 지정
        names_prefix = "wk", # "wk" 문자열을 제거
        names_transform = list(week = as.numeric), # 열의 이름을 지정할 때 사용되는 타입을 integer로 지정
    )
```

#### 여러 개의 변수들이 열 이름에 포함된 경우 

다음 `who` 데이터셋을 보자. 

```{r}
who |>
    head()
```


```{r}
names(who)
```

이 데이터셋에서 `new_` 또는 `new`는 새로운 케이이스를 의미한다. `m` `rel`, `ep`는 진단방법을 의미하고 `m`, `f`는 성별을 의미한다. `1524`, `65` 등은 나이 범위를 의미한다. 

이 데이터셋을 `pivot_longer()` 함수를 사용하여 tidy data로 변환해 보자. 먼저 `names_to`에 의해서 생성되는 열들의 이름을 지정한다. 또 `names_pattern` 인자를 사용하여 열 이름에 포함된 문자열을 패턴으로 지정한다. 

사실 이 기능을 사용하려면 R 언어의 정규 표현식을 알아야 한다. 정규 표현식은 문자열의 패턴을 지정하는 표현식이다. 관심이 있는 경우는 [R for Data Science (2e) 15장 Regular Expressions](https://r4ds.hadley.nz/regexps.html) 장을 참고하라. 


::: {.callout-tip}

`names_pattern` 인자에 사용되는 정규 표현식은 다음과 같다.

- `new_?(.*)_(.)(.*)`
  - `new_` 또는 `new`: `_?`라고 했고 `?`는 앞의 문자가 0번 또는 1번 나오는 것을 의미한다.
  - `(.*)`는 하나의 정규 표현식의 그룹(group)인데, 그 안에 `.*`가 들어가 있어 다음 `_` 문자가 나오기 전까지 모든 문자들을 의미한다.
  - `(.)`도 그룹이고, `.`은 하나의 alphanumeric 문자을 의미한다.
  - `(.*)`도 그룹으로, 모든 문자열을 의미한다. 
  
여기서 사용된 그룹은 `names_to`에서 잡는다.
:::

```{r}
who |>
    pivot_longer(
        cols = !c(country, iso2, iso3, year), # 나라, 국제 표준 국가 코드, 국제 표준 국가 코드, 연도가 들어가지 않는 열들을 모두 선택
        names_to = c("diagnosis", "gender", "age"), # 진단방법, 성별, 나이 범위가 들어가는 열의 이름을 지정
        names_pattern = "new_?(.*)_(.)(.*)",
        values_to = "count" # 값이 들어가는 열의 이름을 "count"로 지정
    )
```

앞에서도 설명했지만 `names_to`로 생성되는 열의 데이터타입은 문자열이다. 이것을 `names_transform` 인자를 사용하여 팩터로 변환하였다.

```{r}
who |>
    pivot_longer(
        cols = !c(country, iso2, iso3, year), # 나라, 국제 표준 국가 코드, 국제 표준 국가 코드, 연도가 들어가지 않는 열들을 모두 선택
        names_to = c("diagnosis", "gender", "age"), # 진단방법, 성별, 나이 범위가 들어가는 열의 이름을 지정
        names_pattern = "new_?(.*)_(.)(.*)",
        names_transform = list(
            diagnosis = as.factor,
            gender = as.factor,
            age = as.factor
        ),
        values_to = "count" # 값이 들어가는 열의 이름을 "count"로 지정
    ) |>
    rename(
        age_group = age
    ) |>
    tail()
```

#### 하나의 행에 여러 관측이 들어간 경우 

다음 `household` 데이터셋을 보자.

```{r}
household
```

이 데이터셋은 하나의 행에 자녀의 출생일과 그 이름을 정리할 것인데, 이것을 하나의 열로 모아서 표현한 것이다. 

이 경우 `names_sep` 인자를 사용하여 열을 분리하고, `names_to` 인자에 `.value`라는 특수한 값을 지정하면 이 부분에 해당되는 부분을 열의 이름으로 지정한다. `dob_child1`, `name_child2`과 같은 열이 있을 때 `names_sep = "_"`로 지정했기 때문에 `dob`와 `name`이 `.value`에 들어가게 되고, `child1`, `child2` 부분이 `child`에 들어가게 된다.
```{r}
household |>
    pivot_longer(
        cols = !family,
        names_to = c(".value", "child"),
        names_sep = "_",
        values_drop_na = TRUE
    )
```

### 복잡한 경우의 피벗팅: Wider 예시 

다음 `fish_encounters` 데이터셋은 물고기에 태그를 붙이고, 여러 지점(`station`)에서 수중 센서를 사용해 해당 물고기의 이동이 감지되었는지를 기록한 데이터이다.  

```{r}
fish_encounters
```

이 경우 어떤 물고기가 어떤 지점에서 감지되었는 정리해 보고 싶을 수 있다. 이 경우 `pivot_wider()` 함수를 사용할 수 있다. `names_from`에 열로 올려 놓을 이름을 지정하다.  

```{r}
fish_encounters |>
    pivot_wider(
        names_from = station,
        values_from = seen
    )
```

이 경우 감지되지 않은 경우에는 `NA`로 표시되는데, 이것을 `0`으로 채워 넣고 싶을 수 있다. 이 경우 `values_fill` 인자를 사용하면 된다. 
```{r}
fish_encounters |>
    pivot_wider(
        names_from = station,
        values_from = seen,
        values_fill = 0
    )
```

여러 조합으로 구성된 데이터가 있다고 해 보자. 다음 코드에서 `.`은 파이프 연산자를 `%>%`를 사용할 때 앞의 데이터프레임을 대신하는 표현식이다. 그래서 `|>` 연산자를 사용할 때는 작동하지 않는다.

```{r}
production <-
    expand_grid(
        product = c("A", "B"),
        country = c("AI", "EI"),
        year = 2000:2014
    ) %>%
    as_tibble() %>%
    mutate(production = rnorm(nrow(.)))
production
```

```{r}
glimpse(production)
```

이 데이터셋을 연도별로 정리해서 보여줄 필요가 있을 수 있고 다음과 같은 코드를 사용할 수 있다. 

```{r}
production |>
    pivot_wider(
        names_from = c(product, country),
        values_from = production
    )
```

이런 경우 이름을 `_`로 연결하여 만들고 있다. 이것을 바꾸려면 `names_sep` 인자를 사용한다. `names_prefix` 인자를 사용하면 접두사를 붙일 수 있다.

```{r}
production |>
    pivot_wider(
        names_from = c(product, country),
        values_from = production,
        names_sep = ".",
        names_prefix = "production."
    )
```

## 정리 

- [Pivoting](https://tidyr.tidyverse.org/articles/pivot.html#unused-columns) 비니에트에 있는 사례들을 모두 정리한 것은 아니다. 더 많은 사례를 보려면 이 링크를 참고한다.

