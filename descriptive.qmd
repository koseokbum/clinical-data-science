# 기술 통계로 데이터 탐색하기(Base R 버전)

기술 통계(Descriptive Statistics)는 그야말로 데이터셋을 기술(describe)하여 데이터를 이해하는 과정을 말한다. 이 장에서는 이런 기술 통계 방법을 통해서 데이터를 탐색하는 방법에 대해서 설명한다. 

이런 일을 하기 위한 fancy한 R 패키지들도 많지만, 여기서는 주로 Base R을 사용하여 기술 통계를 수행하는 방법을 설명하려고 한다(이 내용들은 나중에).

기술 통계 방법은 변수의 scales of measurement에 따라서 내용을 머리 속에 정리하는 것이 좋다.

- Nominal Scale
    - 주요 통계량: percentage, proportion
    - 주요 요약 방법: contingency table, bar chart
- Ordinal Scale
    - 주요 통계량: median
    - 주요 요약 방법: 분할표(contingency table), bar chart
- Numerical Scales
    - 주요 통계량: mean, var와 sd
    - 주요 요약 방법: histogram, box plot, frequency polygon, scatter plot 등 

주로 사용할 R 함수들은 다음과 같다. 

- 합계: `sum()`
- 개수: `length()`
- 평균: `mean()`
- 분산: `var()`
- 표준편차: `sd()`
- 최솟값: `min()`
- 최댓값: `max()`
- 중앙값: `median()`
- 범위: `range()`
- 백분위수: `quantile()`
- `fivenum()`: min, Q1, median, Q3, max
- 변수 종류에 따른 기초 통계: `summary()`
- 분할표(Contingency table): `table()`, `addmargins(table, margins)`, `prop.table(table, margins)` 등 

::: {.callout-tip}
## 분할표(contingency table)

범주형 데이터의 요약은 분할표가 기본이다. (R 팩터(factor)와 levels를 같이 알아야 한다.)
이것은 모든 levels에 대하여 개수를 카운트하여 정리한 표이다. 

다음 사이트에 내용이 잘 정리되어 있다.

- [R Contingency Tables Tutorial](https://www.datacamp.com/tutorial/contingency-tables-r)
:::

## 데이터셋 소개 

우리가 사용할 데이터셋은 캐글(kaggle)에 올라와 있는 [Stroke Prediction Dataset](https://www.kaggle.com/datasets/fedesoriano/stroke-prediction-dataset)이다(캐글에 회원 등록을 하면 누구나 이 데이터셋을 다운로드할 수 있다). 

인터넷에는 이 데이터셋을 사용한 통계 분석 및 머신러닝 관련된 자료들도 많이 찾을 수 있다. 


이 데이터셋은 워킹 디렉터리의 `data` 서브 디렉터리에 `healthcare-dataset-stroke-data.csv`라는 이름으로 저장되어 있다고 생각해 보자. 이 파일의 확장자는 `.csv`로 "Comma-Separated Values file"이다. 플레인 텍스트로 되어 있고, 코마로 값들을 구분한다. CSV 파일은 엑셀로도 쉽게 읽을 수 있고, 엑셀에서 쉽게 CSV로 저장할 수도 있으며, 플레인 텍스트이기 때문에 아무 텍스트 편집기로도 읽을 수 있어서 데이터 과학에서 자주 사용된다.

`readr`이라는 패키지의 `read_csv()` 함수를 사용하여 파일을 읽는다. 이 함수는 데이터를 `tibble`(R 데이터프레임을 보강한 것)로 가지고 온다. (아직 우리가 tibble을 배우지 않아서) 원래의 R 데이터프레임으로 바뀌기 위해서 `as.data.frame()`를 사용했다.

```{r}
#| message: false
#| warning: false
library(readr)
stroke_df <- as.data.frame(read_csv("data/healthcare-dataset-stroke-data.csv"))
head(stroke_df) # 앞 6개의 행
```

`str()` 함수는 데이터의 구조를 파악하는데 좋다. 이 데이터셋은 5,110개의 행과 12개의 열로 구성되어 있다. 


```{r}
str(stroke_df)
```

[캐글 사이트](https://www.kaggle.com/datasets/fedesoriano/stroke-prediction-dataset)를 보면 각 변수에 대한 설명이 있다.

1) id: unique identifier
2) gender: "Male", "Female" or "Other"
3) age: age of the patient
4) hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension
5) heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease
6) ever_married: "No" or "Yes"
7) work_type: "children", "Govt_jov", "Never_worked", "Private" or "Self-employed"
8) Residence_type: "Rural" or "Urban"
9) avg_glucose_level: average glucose level in blood
10) bmi: body mass index
11) smoking_status: "formerly smoked", "never smoked", "smokes" or "Unknown"*
12) stroke: 1 if the patient had a stroke or 0 if not

- Note: "Unknown" in smoking_status means that the information is unavailable for this patient


마지막 열 `stroke`은 뇌졸중의 유무를 `0`, `1`로 정리했고, 주요 뇌졸중 위험인자들이 정리되어 있다. 결측값은 `"N/A"` 또는 흡연(`smoking_status`)인 겅우에는 `"Unknown"`으로 코딩되어 있는 것을 볼 수 있다. 그리고 문자열로 코딩된 것들은 대부분 R에서는 카테코리형 데이터를 표현하는 팩터(factor)로 되어 있어야 하는데 아직은 원래 값 그대로의 상태로 있다. 우선 이런 것들을 정리해 보자.

## 데이터 클리닝: 의도와 목적에 맞게 데이터 정리하기 

이제 데이터셋을 정리해 보자. 

먼저 `id`는 환자의 아이디인데, 숫자로 되어 있어서 이것을 문자로 바꾼다.

```{r}
stroke_df$id <- as.character(stroke_df$id)
```

`gender`는 남자, 여자, 기타로 되어 있는데 팩터로 바꿔준다.

```{r}
stroke_df$gender <- factor(stroke_df$gender, levels = c("Male", "Female", "Other"))
```

`heart_disease`와 `hypertension`은 0과 1로 되어 있는데 역시 팩터로 바꾼다.

```{r}
stroke_df$heart_disease <- factor(stroke_df$heart_disease, levels = c(0, 1), labels = c("No", "Yes"))
stroke_df$hypertension <- factor(stroke_df$hypertension, levels = c(0, 1), labels = c("No", "Yes"))
```

`ever_married`는 결혼 여부로 `No`, `Yes`로 되어 있는데 팩터로 바꾼다. `work_type`는 직업으로 `children`, `Govt_job`, `Never_worked`, `Private`, `Self-employed`로 되어 있다. 이것도 팩터로 바꾼다. `Residence_type`는 거주지로 `Rural`, `Urban`으로 되어 있는데, 이것도 팩터로 바꾼다.

```{r}
stroke_df$ever_married <- factor(stroke_df$ever_married, levels = c("No", "Yes"))
stroke_df$work_type <- factor(stroke_df$work_type, levels = c("children", "Govt_job", "Never_worked", "Private", "Self-employed"))
stroke_df$Residence_type <- factor(stroke_df$Residence_type, levels = c("Rural", "Urban"))
```

다른 변수들을 모두 소문자로 되어 있는데 `Residence_type`만 대문자로 되어 있다. 이름을 소문자로 다시 정해준다.

```{r}
names(stroke_df)[8] <- "residence_type"
```


`bmi`는 문자열로 되어 있는데 이것은 숫자로 바꾼다. 그런데 결측값이 `N/A`로 코딩되어 있어서, 먼저 이 값을 `NA` 바꾸고 나서 진행한다.

```{r}
stroke_df$bmi[stroke_df$bmi == "N/A"] <- NA
stroke_df$bmi <- as.numeric(stroke_df$bmi)
```

`smoking_status`는 흡연 여부로 `formerly smoked`, `never smoked`, `smokes`, `Unknown`으로 되어 있어 팩터로 바꾼다. `stroke`는 뇌졸중 여부로 `0`, `1`로 되어 있다. 팩터로 바꾼다.

```{r}
stroke_df$smoking_status <- factor(stroke_df$smoking_status, levels = c("formerly smoked", "never smoked", "smokes", "Unknown"))
stroke_df$stroke <- factor(stroke_df$stroke, levels = c(0, 1), labels = c("No", "Yes"))
```

이제 데이터셋을 정리했다. 앞의 몇 개의 샘플을 보고, `str()` 함수를 사용하여 그 구조를 확인한다.

```{r}
head(stroke_df, 10)
```


```{r}
str(stroke_df)
```

이 데이터셋을 `.rds` 폼으로 저장한다.

```{r}
saveRDS(stroke_df, "data/stroke_df.rds")
```

이 [데이터셋](data/stroke_df.rds)을 다운로드할 수 있다. RDS 파일을 읽을 때는 다음과 같이 `readRDS()` 함수를 사용하고, 이 데이터프레임의 이름을 지정해 주면 된다. 

```{r}
#| eval: false
stroke_df <- readRDS("data/stroke_df.rds")
```

## 기술 통계로 데이터 탐색 

이제 정리된 데이터셋을 가지고 기술 통계를 사용하여 데이터를 탐색해 보자. 

### summary()로 전체적으로 파악하기 

개별 변수들을 보기 전에  `summary()` 함수를 데이터프레임에 적용해 보자. 이 함수는 각 변수의 요약 통계량을 한꺼번에 볼 수 있어서 편리하다. 결과를 관찰해 보면 변수가 숫자형 변수인 경우에는 Minimum, 1st Qu., Median, Mean, 3rd Qu., Maximum이 출력되고, 팩터형 변수인 경우에는 각 레벨의 빈도수가 출력됨을 볼 수 있다. 

```{r}
summary(stroke_df)
```

이 데이터셋에서 변수는 `age`, `avg_glucose_level`, `bmi`는 숫자형 변수이고, 나머지 변수들은 모두 팩터형 변수이다. 

데이터셋의 목적이 뇌졸중의 위험인자를 탐색하는 것일 가능성이 높다. 뇌졸중 여부인 `stroke` 변수를 기준으로 나머지 변수들을 탐색해 보자

우선 우리의 관심사가 뇌졸중의 유무로 먼저 이 변수를 염두에 두고 시작하는 것이 좋겠다. 전체 5110명 가운데 뇌졸중이 없는 경우가 4861명이고 뇌졸중이 있는 경우가 249명이다.

```{r}
barplot(table(stroke_df$stroke),
    main = "Stroke Distribution",
    xlab = "Stroke",
    ylab = "Frequency",
    col = c("lightblue", "lightgreen"),
    border = "black"
)
```

### 숫자형 변수 탐색하기(Numerical Variables)

숫자형 변수는 여러 가지 통계량으로 요약할 수 있다. 이 데이터셋에서 숫자형 변수는 `age`, `avg_glucose_level`, `bmi`이다. 이 변수들은 연속형 변수이기 때문에 평균(mean), 분산(var), 표준편차(sd) 등으로 요약할 수 있다. 또 숫자형 변수는 분포가 중요하기 때문에 히스토그램, 박스 플롯, 스캐터 플롯 등으로 정리할 수 있겠다. 

먼저 뇌졸중 여부에 상관없이 전체적으로 보고, 그 다음 뇌졸중의 유무에 따라 어떻게 달라지는지 살펴보자.

이제 `age`를 보자. 

전체의 `age`의 평균, 분산, 표준편차는 다음과 같다.

```{r}
#| collapse: true
mean(stroke_df$age, na.rm = TRUE) # 평균
var(stroke_df$age, na.rm = TRUE) # 분산
sd(stroke_df$age, na.rm = TRUE) # 표준편차
```

분포를 보자. 

```{r}
hist(stroke_df$age,
    main = "Age Distribution",
    xlab = "Age",
    ylab = "Frequency",
    col = "lightblue",
    border = "black"
)
```

박스 플롯을 보면 다음과 같다. 히스토그램과 비교할 수 있게 수평으로 그려 보았다.

```{r}
boxplot(stroke_df$age,
    main = "Age Boxplot",
    xlab = "Age",
    horizontal = TRUE,
    col = "lightblue",
    border = "black"
)
```

뇌줄중 유무에 따른 차이를 보자. 

```{r}
hist(stroke_df$age[stroke_df$stroke == "No"],
    main = "Age Distribution by Stroke (without Stroke)",
    xlab = "Age",
    ylab = "Frequency",
    col = "lightblue",
    border = "black"
)
```

```{r}
hist(stroke_df$age[stroke_df$stroke == "Yes"],
    main = "Age Distribution by Stroke (with Stroke)",
    xlab = "Age",
    ylab = "Frequency",
    col = "lightgreen",
    border = "black"
)
```

박스 플롯을 보자. R 포뮬라를 사용하여 `stroke`에 따라서 `age`를 구분하도록 지시하였다.

```{r}
boxplot(stroke_df$age ~ stroke_df$stroke,
    main = "Age Boxplot by Stroke",
    xlab = "Stroke",
    ylab = "Age",
    col = c("lightblue", "lightgreen"),
    border = "black"
)
```

뇌졸중이 있는 그룹과 없는 구룹의 평균 차이가 있는지 `t.test()`를 사용해 검정해 보았다.

```{r}
result <- t.test(stroke_df$age[stroke_df$stroke == "No"],
    stroke_df$age[stroke_df$stroke == "Yes"],
    var.equal = TRUE
)
result
```

`broom` 패키지는 결과물을 정리하여 보고, 관련된 값을 추출할 때 편리하다.

```{r}
library(broom)
tidy(result)
```

다음은 `avg_glucose_level`이다.

```{r}
hist(stroke_df$avg_glucose_level,
    main = "Average Glucose Level Distribution",
    xlab = "Average Glucose Level",
    ylab = "Frequency",
    col = "lightblue",
    border = "black"
)
```

마찬가지로 뇌줄중의 유무에 따른 차이를 박스 플롯으로 보자. 

```{r}
boxplot(stroke_df$avg_glucose_level ~ stroke_df$stroke,
    main = "Average Glucose Level Boxplot by Stroke",
    xlab = "Stroke",
    ylab = "Average Glucose Level",
    col = c("lightblue", "lightgreen"),
    border = "black"
)
```

`t.test`를 사용하여 뇌졸중 유무에 따른 평균 차이를 검정해 보자.

```{r}
result <- t.test(stroke_df$avg_glucose_level[stroke_df$stroke == "No"],
    stroke_df$avg_glucose_level[stroke_df$stroke == "Yes"],
    var.equal = TRUE
)
result
```

마지막으로 `bmi`를 보자. 

결측값의 개수를 확인하자.

```{r}
sum(is.na(stroke_df$bmi))
```

결측값을 제외하고 평균, 분산, 표준편차를 구하자.

```{r}
mean(stroke_df$bmi, na.rm = TRUE) # 평균
var(stroke_df$bmi, na.rm = TRUE) # 분산
sd(stroke_df$bmi, na.rm = TRUE) # 표준편차
```

다음은 히스토그램이다.

```{r}
hist(stroke_df$bmi,
    main = "BMI Distribution",
    xlab = "BMI",
    ylab = "Frequency",
    col = "lightblue",
    border = "black"
)
```

뇌졸중 유무에 따른 차이를 박스 플롯으로 보자.

```{r}
boxplot(stroke_df$bmi ~ stroke_df$stroke,
    main = "BMI Boxplot by Stroke",
    xlab = "Stroke",
    ylab = "BMI",
    col = c("lightblue", "lightgreen"),
    border = "black"
)
```

`t.test`를 사용하여 뇌졸중 유무에 따른 평균 차이를 검정해 보자.

```{r}
result <- t.test(stroke_df$bmi[stroke_df$stroke == "No"],
    stroke_df$bmi[stroke_df$stroke == "Yes"],
    var.equal = TRUE
)
result
```





`age`와 `avg_glucose_level`의 관계를 스캐터 플롯으로 그려 보자.


```{r}
plot(stroke_df$age, stroke_df$avg_glucose_level,
    main = "Age vs. Average Glucose Level",
    xlab = "Age",
    ylab = "Average Glucose Level",
    col = ifelse(stroke_df$stroke == "Yes", "lightgreen", "lightblue"),
    pch = 19
)
```

상관계수를 구해 보자.

```{r}
cor(stroke_df$age, stroke_df$avg_glucose_level, use = "pairwise.complete.obs")
```


`age`와 `bmi`의 관계는 어떨까?

```{r}
plot(stroke_df$age, stroke_df$bmi,
    main = "Age vs. BMI",
    xlab = "Age",
    ylab = "BMI",
    col = ifelse(stroke_df$stroke == "Yes", "lightgreen", "lightblue"),
    pch = 19
)
```

상관계수를 구해 보자.

```{r}
cor(stroke_df$age, stroke_df$bmi, use = "pairwise.complete.obs")
```


`avg_glucose_level`과 `bmi`의 관계는 어떨까?

```{r}
plot(stroke_df$avg_glucose_level, stroke_df$bmi,
    main = "Average Glucose Level vs. BMI",
    xlab = "Average Glucose Level",
    ylab = "BMI",
    col = ifelse(stroke_df$stroke == "Yes", "lightgreen", "lightblue"),
    pch = 19
)
```

상관계수를 구해보자.

```{r}
cor(stroke_df$avg_glucose_level, stroke_df$bmi, use = "pairwise.complete.obs")
```


### 범주형 변수 탐색 (Categorical Variables)

이 데이터셋에서 범주형 변수는 `gender`, `hypertension`, `heart_disease`, `ever_married`, `work_type`, `residence_type`, `smoking_status`이다. 이 변수들은 모두 팩터형 변수이기 때문에 빈도수를 구할 수 있다.

빈도수는 contingency table로 정리할 수 있는데, `table()` 함수를 사용하여 만든다.

```{r}
table(stroke_df$gender)
table(stroke_df$hypertension)
table(stroke_df$heart_disease)
table(stroke_df$ever_married)
table(stroke_df$work_type)
table(stroke_df$residence_type)
table(stroke_df$smoking_status)
```

`gender`의 뇌졸중 유무에 따른 빈도수를 구해보자. 

```{r}
table(stroke_df$gender, stroke_df$stroke)
prop.table(table(stroke_df$gender, stroke_df$stroke), margin = 1)
```


`hypertension`의 뇌졸중 유무에 따른 빈도수를 구해보자.

```{r}
table(stroke_df$hypertension, stroke_df$stroke)
prop.table(table(stroke_df$hypertension, stroke_df$stroke), margin = 1)
```

이것을 막대 그래프(bar plot)으로 그려 보자.

```{r}
barplot(table(stroke_df$hypertension, stroke_df$stroke),
    main = "Hypertension by Stroke",
    xlab = "Hypertension",
    ylab = "Frequency",
    col = c("lightblue", "lightgreen"),
    border = "black",
    beside = TRUE
)
```

`chisq.test()`를 사용하여 뇌졸중 유무에 따른 비율 차이를 검정해 보자.

```{r}
result <- chisq.test(table(stroke_df$hypertension, stroke_df$stroke))
result
```

`hypertension`의 뇌졸중에 대한 relative risk를 계산해 보자.

```{r}
table(stroke_df$hypertension, stroke_df$stroke)
```
Relative Risk는 보통 전향적 연구에서 사용하고, 위험 인자가 없는 집단에서의 risk와 위험 인자가 있는 집단에서의 risk(확률)을 비교한다.

```{r}
66/(432+66) / (183/(4429+183))
```

이것이 후향적 연구였다면 odds ratio를 계산할 것이다.


```{r}
(66/432) / (183/4429) 
```

![Relative Risk와 Odd's ratio](images/rrod.png){#fig-rrod}


`epitools`라는 패키지를 사용하면 상대위험도(relative risk)와 오즈비(odds ratio)를 쉽게 계산할 수 있고, 신뢰구간도 계산된다.

```{r}
tbl <- table(stroke_df$hypertension, stroke_df$stroke)
library(epitools)
riskratio(tbl)
oddsratio(tbl)
```





`heart_disease`의 뇌졸중 유무에 따른 빈도수를 구해보자.

```{r}
table(stroke_df$heart_disease, stroke_df$stroke)
prop.table(table(stroke_df$heart_disease, stroke_df$stroke), margin = 1)
```

이것을 막대 그래프(bar plot)으로 그려 보자.

```{r}
barplot(table(stroke_df$heart_disease, stroke_df$stroke),
    main = "Heart Disease by Stroke",
    xlab = "Heart Disease",
    ylab = "Frequency",
    col = c("lightblue", "lightgreen"),
    border = "black",
    beside = TRUE
)
```

`chisq.test()`를 사용하여 뇌졸중 유무에 따른 비율 차이를 검정해 보자.

```{r}
result <- chisq.test(table(stroke_df$heart_disease, stroke_df$stroke))
result
```





`ever_married`의 뇌졸중 유무에 따른 빈도수를 구해보자.

```{r}
table(stroke_df$ever_married, stroke_df$stroke)
prop.table(table(stroke_df$ever_married, stroke_df$stroke), margin = 1)
```

`chisq.test()`를 사용하여 뇌졸중 유무에 따른 비율 차이를 검정해 보자.

```{r}
result <- chisq.test(table(stroke_df$ever_married, stroke_df$stroke))
result
```


`work_type`의 뇌졸중 유무에 따른 빈도수를 구해보자.

```{r}
table(stroke_df$work_type, stroke_df$stroke)
prop.table(table(stroke_df$work_type, stroke_df$stroke), margin = 1)
```

`residence_type`의 뇌졸중 유무에 따른 빈도수를 구해보자.

```{r}
table(stroke_df$residence_type, stroke_df$stroke)
prop.table(table(stroke_df$residence_type, stroke_df$stroke), margin = 1)
```

`smoking_status`의 뇌졸중 유무에 따른 빈도수를 구해보자.

```{r}
table(stroke_df$smoking_status, stroke_df$stroke)
prop.table(table(stroke_df$smoking_status, stroke_df$stroke), margin = 1)
```

이것을 막대 그래프(bar plot)으로 그려 보자.

```{r}
barplot(table(stroke_df$smoking_status, stroke_df$stroke),
    main = "Smoking Status by Stroke",
    xlab = "Smoking Status",
    ylab = "Frequency",
    col = c("lightblue", "lightgreen"),
    border = "black",
    beside = TRUE
)
```

