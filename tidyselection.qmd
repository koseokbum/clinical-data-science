# [tidyselect]{.style-text font-weight="bold" color="#D95F02"} 열 선택 {#sec-tidy-select}

Tidyverse 메타패키지에 속하는 `tidyr`, `dplyr`, `purrr`과 같은 패키지의 함수들을 모두 `tidyselect`라는 열 선택 방법을 사용한다. 이것은 그 자체가 아주 작은 언어이기도 한데, 잘 사용하면 작업을 쉽게 할 수 있다. 특히 수십, 수백개의 열 이름을 가진 데이터를 처리할 때 이 방법이 아주 효과적이다.

- [Selection language](https://tidyselect.r-lib.org/reference/language.html)에 있는 내용을 바탕으로 정리했다.

```{r}
#| message: false
library(tidyverse)
```

`penguins` 데이터셋을 사용해서 열 선택 방법을 살펴보자.

```{r}
head(penguins)
```

- `변수1:변수10` 형식으로 열 이름을 지정하면 데이터프레임에서 `변수1` 열부터 `변수10` 열까지의 열을 선택한다. 

```{r}
penguins |>
    select(bill_len:body_mass) |>
    slice(1:5)
```

- `starts_with("변수")` 형식으로 열 이름을 지정하면 데이터프레임에서 `변수` 열이름으로 시작하는 열을 선택하고 `ends_with("변수")` 형식으로 열 이름을 지정하면 데이터프레임에서 `변수` 열이름으로 끝나는 열을 선택한다.

```{r}
penguins |>
    select(starts_with("bill")) |>
    slice(1:5)
```

```{r}
penguins |>
    select(ends_with("len")) |>
    slice(1:5)
```

- `contains("문자열")` 형식으로 열 이름을 지정하면 데이터프레임에서 이 `문자열`을 포함하는 열을 선택한다.

```{r}
penguins |>
    select(contains("pper")) |>
    slice(1:5)
```

- `matches("정규표현식")` 형식으로 열 이름을 지정하면 데이터프레임에서 이 `정규표현식`에 일치하는 열을 선택한다. 정규 표현식(regular expression)은 문자열을 표현하는 형식으로 문자열 패턴을 지정하는 일반적인 방법이다. 강력한데, 처음 배우는 사람들은 어려워하는 편이다. 예를 들어, `a[a-z]{2}`는 `a` 문자 뒤에 오는 두 개의 영문자가 따라 오는 경우를 말한다.

```{r}
penguins |>
    select(matches("a[a-z]{2}")) |>
    slice(1:5)
```

- `num_range("변수", 1:10)` 형식으로 열 이름을 지정하면 데이터프레임에서 `변수1`, `변수2`, ..., `변수10` 열을 선택한다. `tidyr` 패키지에 들어 있는 `billoard` 데이터셋을 예로 보자. 여기에서 `wk1`에서 `wk8` 열을 선택해 보자.

```{r}
head(billboard)
```

```{r}
billboard |>
    select(num_range("wk", 1:8)) |>
    slice(1:5)
```

- `all_of(c("변수1", "변수2", "변수3"))` 형식으로 열 이름을 지정하면 데이터프레임에서 이 열들을 선택한다. 지정한 열 이름이 모두 있어야 실행되고, 없으면 에러가 발생한다. 반면 `any_of(c("변수1", "변수2", "변수3"))` 형식으로 열 이름을 지정하면 데이터프레임에서 이 열들을 선택한다. 있는 열들만 선택한다.

```{r}
sel_vars <- c("bill_len", "bill_dep", "flipper_len")
penguins |>
    select(all_of(sel_vars)) |>
    slice(1:5)

sel_vars <- c("bill_len", "bill_depth", "flipper_len", "body_mass")
penguins |>
    select(any_of(sel_vars)) |>
    slice(1:5)
```

- `everything()` 형식으로 열 이름을 지정하면 데이터프레임에서 모든 열을 선택한다.

```{r}
penguins |>
    select(everything()) |>
    slice(1:5)
```

- `last_col()` 형식으로 열 이름을 지정하면 데이터프레임에서 마지막 열을 선택한다.

```{r}
penguins |>
    select(last_col()) |>
    slice(1:5)
```

- `where(fn)` 형식으로 열 이름을 지정하면 데이터프레임의 열에 함수 `fn`을 적용한 결과가 `TRUE`인 열을 선택한다. 팩퍼(factor) 열인지 확인하는 `is.factor`, 숫자 열인지 확인하는 `is.numeric` 등의 함수를 사용할 수 있다.

```{r}
penguins |>
    select(where(is.factor)) |>
    slice(1:5)
```

```{r}
penguins |>
    select(where(is.numeric)) |>
    slice(1:5)
```

이런 선택에서 연산자를 추가하여 사용할 수 있다. 

- `!selection`은 `selection`에 해당하는 열을 제외한 나머지 열을 선택한다. `!`에 마이너스 `-` 기호를 사용할 수도 있다.

```{r}
penguins |>
    select(!starts_with("bill")) |>
    slice(1:5)
```

```{r}
penguins |>
    select(-starts_with("bill")) |>
    slice(1:5)
```

- `selection1 & selection2`는 AND 로직을 `selection` | selection2` OR 로직을 사용한다.

```{r}
penguins |>
    select(starts_with("bill") | ends_with("len")) |>
    slice(1:5)
```

```{r}
penguins |>
    select(starts_with("bill") & ends_with("len")) |>
    slice(1:5)
```
